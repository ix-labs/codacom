<?php include_once("model.php"); 
function print_list($what) {
	echo "<ul>";
	$arr = list_available($what);
	$des = get_descriptions($what, $arr);
	foreach($arr as $e) {
		echo "<li><b>" . htmlspecialchars($e) . "</b>";
		if(array_key_exists($e, $des) && $des[$e] != "")
			echo " : " . htmlspecialchars($des[$e]);
		echo "</li>";
	}
	echo "</ul>";
}
?>
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>COmmunity Detection Algorithm COMparator (CoDACom)</title>

    <!-- Bootstrap -->
    <link href="bootstrap/css/bootstrap.min.css" rel="stylesheet">

    <!-- Custom styles for this template -->
    <link href="main.css" rel="stylesheet">	

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
				 <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
				 <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
				 <![endif]-->
  </head>
  <body>
		
		<?php $file='use.php'; include_once('header.php');?>

		<div class="row">
	  	<!--left-->
	    <div class="col-xs-hidden col-sm-3">
				<nav id="leftCol">
					<ul class="nav nav-pills nav-stacked" id="sidebar">
					</ul>
				</nav>
	    </div><!--/left-->
			
			<div class="col-xs-12 col-sm-9"> 
				
				<h2 id="command-line">Invocation</h2>
				
				<h3>Main operations</h3>
				<p>
					To call CoDACom, the main script is :
				</p>
				<div class="code">sh execute.sh [-pmac] [varpath]</div>
				<p>	
					The options correspond to the subparts that are executed, if no option is provided all the subparts will be run sequentially.
					The optional argument is the path to the <span class="file">vars.sh</span> configuration file, found by default in the execution folder.
					Please note that, without inputs and a configuration step, the program will do nothing.
					You need to :
				</p>
				<ul>
					<li>Provide graphs by placing them in the appropriate folders, <span class="file">raw/inputs</span> by default</li>
					<li>The inputs are handled with <b>whitelists</b>. You need to update them so that CoDACom recognises your inputs, by using the <span class="file">update_whitelists.sh</span> script or directly modifying the configuration file <span class="file">vars.sh</span>.</li>
				</ul>
				
				
				<h3>Main files</h3>
				<p>
					To give instructions to the program, the three following files are important.
				</p>
				<ul>
					<li><span class="file">vars.sh</span> is a configuration script that is included in most scripts, and that contains system and behaviour configuration. You may set the number of parallel jobs, a timeout, a verbose level, etc. You may notably set the list of the files on which the computation will be carried on.</li>
					<li><span class="file">update_whitelists.sh</span> is a utilitary script that updates vars.sh with folder content. You may only update part some of the whitelists, the default behaviour being to update everything.</li>
					<li><span class="file">execute.sh</span> is the main execution script. You may run it using a subset of the four options "-pmac", which will only run the corresponding subparts. Please note that the files generated by the preprocessing step are not automatically added to the corresponding whitelist, you will therefore need to update it between the preprocessing and the method subpart.</li>
				</ul>

				<p>
					First, one need to provide the graphs to the program by placing them in the appropriate folders.
					It corresponds to the RAW_INPUT_DIR variable in <span class="file">vars.sh</span>, which is <span class="file">raw/inputs</span> by default.
					The corresponding ground truth file goes to the RAW_GROUND_TRUTH folder, <span class="file">raw/ground_truth</span> by default.
				</p>
				
				
				<p>
					The numerical results may be found in the RESULT_DIR folder, specified in <span class="file">vars.sh</span>.
					The default folder is the subfolder <span class="file">results</span>.
					Clusterings may be found in the OUTPUT_DIR, default being <span class="file">clusterings</span>.
				</p>


				<h2 id="subparts">Subparts</h2>
				
				Four purposes have been identified for CoDACom, corresponding to four different behaviors.

				<h3>Preprocessing</h3>

				<p>
					In order to normalise and to avoid errors, the inputs graphs are :
				</p>
				<ul>
					<li>checked for consistency</li>
					<li>reduced to their largest connected component</li>
					<li>reordered to get consecutive ids</li>
					<li>normalised to an edgelist format</li>
				</ul>
				<p>
					This reordering uses a BFS algorithm that improves most of the processing thanks to caching.
				</p>

				<p>
					A ground-truth may also be provided.
					It is preprocessed as well in order to keep consistency with the graph ids.
					A translation file is also outputted, which tracks the translation from old to new id.
				</p>

				<h3>Methods</h3>
				
				<p>
					The implementation of various community detection algorithms is executed.
					Sometimes, some change of the graph format from the internal one is needed to match the expectation of the specific implementation.
				</p>

				<h3>Analysis</h3>
				
				<p>
					In this subpart, comparison methods and quality functions are used.
					Comparison methods are functions that compare the result of two clusterings, without taking the graph topology into account.
					Quality functions quantify the quality of clusterings.
				</p>

				<p>
					First, a simple comparison of all pairs of clusterings is processed.
					Second, the qualities of each clustering are computed.
					If the graphs feature a ground-truth, the clusterings are compared to this ground-truth, and <a href="https://en.wikipedia.org/wiki/Spearman's_rank_correlation_coefficient">Spearman's coefficient</a> is computed between the ranking of the clusters from the perspective of the quality functions and the ranking of the ground-truth.
				</p>

				<h3>Conversion</h3>

				<p>
					You may convert the clusterings in a graphml format, which can be visualised using any modern graph visualisation software, such as <a href=http://gephi.github.io/>Gephi</a>.
					The clusterings are represented as edges labels (internal/external edges) and node labels (cluster id).
				</p>

				<p>
					All the outputs of the program are originally available as space separated table files.
					To make things easier, a tabular LaTeX conversion is provided.
				</p>
				
				<p>
					The quotient graph is constituted by the clusters as nodes and an edge exist if there is at least one edge connecting the clusters in the base graph.
					Useful data about the clusters and their connections is available in the labels.
				</p>
				
				<h2 id="components">Available components</h2>
				
				When using CoDACom for a scientific publication, it would be kind of you to cite the original author of the used components.

				<h3>Methods</h3>
				
				<?php print_list("methods"); ?>

				<h3>Comparison</h3>

				<?php print_list("comparison"); ?>
				
				<h3>Quality functions</h3>

				<?php print_list("quality"); ?>

				<h2 id="restrictions">Restrictions</h2>

				CoDACom does not (yet) support directed or weighted graphs nor overlapping community detection.

				<h2 id="formats">Formats</h2>
				
				<p>
					Accepted graph formats (see the <a href="http://igraph.org/c/doc/igraph-Foreign.html">related igraph documentation</a> for more information) :
				</p>
				<ul>
					<li>gml</li>
					<li>graphml</li>
					<li>ncol</li>
					<li>lgl</li>
				</ul>
				
				<p>
					Accepted ground-truth format : list of nodes and membership
				</p>
				<div class="code">
					node_id1 cluster_id1 cluster_id2 ... <br />
					node_id2 cluster_id1 cluster_id3 ... <br />
					...
				</div>
				<p>
					Translation format : list of nodes id
				</p>
				<div class="code">
					old_id new_id <br />
					...
				</div>
				<p>
					Internal graph format : list of edges
				</p>
				<div class="code">
					node_id1 node_id2 <br />
					...
				</div>
				<p>
					Internal ground-truth format : list of nodes and membership
				</p>
				<div class="code">
					node_id1 cluster_id1 cluster_id2 ... <br />
					node_id2 cluster_id1 cluster_id3 ... <br />
					...
				</div>
				
				<h2 id="breakdown">File hierarchy breakdown</h2>
				
				<ul>
					<li><span class="file">src</span> : Source directory
						<ul>
							<li><span class="file">analysis</span> : The code used for the analysis phase</li>
							<li><span class="file">conversion</span> : The code used for the conversion phase</li>
							<li><span class="file">libcomparison</span> : The library implementing comparison methods</li>
							<li><span class="file">libmisc</span> : Miscalleanous utility functions</li>
							<li><span class="file">libquality</span> : The library implementing quality functions</li>
							<li><span class="file">preprocessing</span> : The code used for the analysis phase</li>
							<li><span class="file">tools</span> : scripts, tools used by methods or external scripts</li>
						</ul>
					</li>
					<li><span class="file">html</span> : This website</li>
					<li><span class="file">methods</span> : The community detection methods. Any subdir containing <span class="file">execute.sh</span> will be considered as a method</li>
					<li><span class="file">preprocessed</span> : The output of the preprocessing phase</li>
					<li><span class="file">raw</span> : The input folder</li>
					<li><span class="file">tmp</span> : Internal temporary folder</li>
				</ul>
			</div>
		</div>
		<!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
		<script src="jquery.min.js"></script>
		<!-- Include all compiled plugins (below), or include individual files as needed -->
		<script src="bootstrap/js/bootstrap.min.js"></script>
		<!-- JavaScript jQuery code from Bootply.com editor  -->        
		<script src='main.js'></script>
  </body>
</html>
